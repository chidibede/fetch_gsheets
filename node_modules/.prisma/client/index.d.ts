import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw }

/**
 * Prisma Client JS version: 2.8.1
 * Query Engine version: 439da16b2f8314c6faca7d2dad2cdcf0732e8a9c
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  db?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findOne'
  | 'findMany'
  | 'findFirst'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'

/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: string
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Alembic_versions
 * const alembic_versions = await prisma.alembic_version.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Alembic_versions
   * const alembic_versions = await prisma.alembic_version.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$queryRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;

  /**
   * `prisma.alembic_version`: Exposes CRUD operations for the **alembic_version** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alembic_versions
    * const alembic_versions = await prisma.alembic_version.findMany()
    * ```
    */
  get alembic_version(): alembic_versionDelegate;

  /**
   * `prisma.document`: Exposes CRUD operations for the **document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): documentDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const Alembic_versionDistinctFieldEnum: {
  version_num: 'version_num'
};

export declare type Alembic_versionDistinctFieldEnum = (typeof Alembic_versionDistinctFieldEnum)[keyof typeof Alembic_versionDistinctFieldEnum]


export declare const DocumentDistinctFieldEnum: {
  id: 'id',
  title: 'title',
  docs: 'docs',
  doc_name: 'doc_name',
  created_at: 'created_at'
};

export declare type DocumentDistinctFieldEnum = (typeof DocumentDistinctFieldEnum)[keyof typeof DocumentDistinctFieldEnum]


export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export declare const QueryMode: {
  default: 'default',
  insensitive: 'insensitive'
};

export declare type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]



/**
 * Model alembic_version
 */

export type alembic_version = {
  version_num: string
}


export type AggregateAlembic_version = {
  count: number
}



export type AggregateAlembic_versionArgs = {
  where?: alembic_versionWhereInput
  orderBy?: Enumerable<alembic_versionOrderByInput> | alembic_versionOrderByInput
  cursor?: alembic_versionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<Alembic_versionDistinctFieldEnum>
  count?: true
}

export type GetAlembic_versionAggregateType<T extends AggregateAlembic_versionArgs> = {
  [P in keyof T]: P extends 'count' ? number : never
}


    
    

export type alembic_versionSelect = {
  version_num?: boolean
}

export type alembic_versionGetPayload<
  S extends boolean | null | undefined | alembic_versionArgs,
  U = keyof S
> = S extends true
  ? alembic_version
  : S extends undefined
  ? never
  : S extends alembic_versionArgs | FindManyalembic_versionArgs
  ? 'include' extends U
    ? alembic_version 
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof alembic_version ? alembic_version[P]
: 
 never
    }
  : alembic_version
: alembic_version


export interface alembic_versionDelegate {
  /**
   * Find zero or one Alembic_version that matches the filter.
   * @param {FindOnealembic_versionArgs} args - Arguments to find a Alembic_version
   * @example
   * // Get one Alembic_version
   * const alembic_version = await prisma.alembic_version.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOnealembic_versionArgs>(
    args: Subset<T, FindOnealembic_versionArgs>
  ): CheckSelect<T, Prisma__alembic_versionClient<alembic_version | null>, Prisma__alembic_versionClient<alembic_versionGetPayload<T> | null>>
  /**
   * Find the first Alembic_version that matches the filter.
   * @param {FindFirstalembic_versionArgs} args - Arguments to find a Alembic_version
   * @example
   * // Get one Alembic_version
   * const alembic_version = await prisma.alembic_version.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstalembic_versionArgs>(
    args?: Subset<T, FindFirstalembic_versionArgs>
  ): CheckSelect<T, Prisma__alembic_versionClient<alembic_version | null>, Prisma__alembic_versionClient<alembic_versionGetPayload<T> | null>>
  /**
   * Find zero or more Alembic_versions that matches the filter.
   * @param {FindManyalembic_versionArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Alembic_versions
   * const alembic_versions = await prisma.alembic_version.findMany()
   * 
   * // Get first 10 Alembic_versions
   * const alembic_versions = await prisma.alembic_version.findMany({ take: 10 })
   * 
   * // Only select the `version_num`
   * const alembic_versionWithVersion_numOnly = await prisma.alembic_version.findMany({ select: { version_num: true } })
   * 
  **/
  findMany<T extends FindManyalembic_versionArgs>(
    args?: Subset<T, FindManyalembic_versionArgs>
  ): CheckSelect<T, Promise<Array<alembic_version>>, Promise<Array<alembic_versionGetPayload<T>>>>
  /**
   * Create a Alembic_version.
   * @param {alembic_versionCreateArgs} args - Arguments to create a Alembic_version.
   * @example
   * // Create one Alembic_version
   * const Alembic_version = await prisma.alembic_version.create({
   *   data: {
   *     // ... data to create a Alembic_version
   *   }
   * })
   * 
  **/
  create<T extends alembic_versionCreateArgs>(
    args: Subset<T, alembic_versionCreateArgs>
  ): CheckSelect<T, Prisma__alembic_versionClient<alembic_version>, Prisma__alembic_versionClient<alembic_versionGetPayload<T>>>
  /**
   * Delete a Alembic_version.
   * @param {alembic_versionDeleteArgs} args - Arguments to delete one Alembic_version.
   * @example
   * // Delete one Alembic_version
   * const Alembic_version = await prisma.alembic_version.delete({
   *   where: {
   *     // ... filter to delete one Alembic_version
   *   }
   * })
   * 
  **/
  delete<T extends alembic_versionDeleteArgs>(
    args: Subset<T, alembic_versionDeleteArgs>
  ): CheckSelect<T, Prisma__alembic_versionClient<alembic_version>, Prisma__alembic_versionClient<alembic_versionGetPayload<T>>>
  /**
   * Update one Alembic_version.
   * @param {alembic_versionUpdateArgs} args - Arguments to update one Alembic_version.
   * @example
   * // Update one Alembic_version
   * const alembic_version = await prisma.alembic_version.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends alembic_versionUpdateArgs>(
    args: Subset<T, alembic_versionUpdateArgs>
  ): CheckSelect<T, Prisma__alembic_versionClient<alembic_version>, Prisma__alembic_versionClient<alembic_versionGetPayload<T>>>
  /**
   * Delete zero or more Alembic_versions.
   * @param {alembic_versionDeleteManyArgs} args - Arguments to filter Alembic_versions to delete.
   * @example
   * // Delete a few Alembic_versions
   * const { count } = await prisma.alembic_version.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends alembic_versionDeleteManyArgs>(
    args: Subset<T, alembic_versionDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Alembic_versions.
   * @param {alembic_versionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Alembic_versions
   * const alembic_version = await prisma.alembic_version.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends alembic_versionUpdateManyArgs>(
    args: Subset<T, alembic_versionUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Alembic_version.
   * @param {alembic_versionUpsertArgs} args - Arguments to update or create a Alembic_version.
   * @example
   * // Update or create a Alembic_version
   * const alembic_version = await prisma.alembic_version.upsert({
   *   create: {
   *     // ... data to create a Alembic_version
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Alembic_version we want to update
   *   }
   * })
  **/
  upsert<T extends alembic_versionUpsertArgs>(
    args: Subset<T, alembic_versionUpsertArgs>
  ): CheckSelect<T, Prisma__alembic_versionClient<alembic_version>, Prisma__alembic_versionClient<alembic_versionGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyalembic_versionArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateAlembic_versionArgs>(args: Subset<T, AggregateAlembic_versionArgs>): Promise<GetAlembic_versionAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for alembic_version.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__alembic_versionClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * alembic_version findOne
 */
export type FindOnealembic_versionArgs = {
  /**
   * Select specific fields to fetch from the alembic_version
  **/
  select?: alembic_versionSelect | null
  /**
   * Filter, which alembic_version to fetch.
  **/
  where: alembic_versionWhereUniqueInput
}


/**
 * alembic_version findFirst
 */
export type FindFirstalembic_versionArgs = {
  /**
   * Select specific fields to fetch from the alembic_version
  **/
  select?: alembic_versionSelect | null
  /**
   * Filter, which alembic_version to fetch.
  **/
  where?: alembic_versionWhereInput
  orderBy?: Enumerable<alembic_versionOrderByInput> | alembic_versionOrderByInput
  cursor?: alembic_versionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<Alembic_versionDistinctFieldEnum>
}


/**
 * alembic_version findMany
 */
export type FindManyalembic_versionArgs = {
  /**
   * Select specific fields to fetch from the alembic_version
  **/
  select?: alembic_versionSelect | null
  /**
   * Filter, which alembic_versions to fetch.
  **/
  where?: alembic_versionWhereInput
  /**
   * Determine the order of the alembic_versions to fetch.
  **/
  orderBy?: Enumerable<alembic_versionOrderByInput> | alembic_versionOrderByInput
  /**
   * Sets the position for listing alembic_versions.
  **/
  cursor?: alembic_versionWhereUniqueInput
  /**
   * The number of alembic_versions to fetch. If negative number, it will take alembic_versions before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` alembic_versions.
  **/
  skip?: number
  distinct?: Enumerable<Alembic_versionDistinctFieldEnum>
}


/**
 * alembic_version create
 */
export type alembic_versionCreateArgs = {
  /**
   * Select specific fields to fetch from the alembic_version
  **/
  select?: alembic_versionSelect | null
  /**
   * The data needed to create a alembic_version.
  **/
  data: alembic_versionCreateInput
}


/**
 * alembic_version update
 */
export type alembic_versionUpdateArgs = {
  /**
   * Select specific fields to fetch from the alembic_version
  **/
  select?: alembic_versionSelect | null
  /**
   * The data needed to update a alembic_version.
  **/
  data: alembic_versionUpdateInput
  /**
   * Choose, which alembic_version to update.
  **/
  where: alembic_versionWhereUniqueInput
}


/**
 * alembic_version updateMany
 */
export type alembic_versionUpdateManyArgs = {
  data: alembic_versionUpdateManyMutationInput
  where?: alembic_versionWhereInput
}


/**
 * alembic_version upsert
 */
export type alembic_versionUpsertArgs = {
  /**
   * Select specific fields to fetch from the alembic_version
  **/
  select?: alembic_versionSelect | null
  /**
   * The filter to search for the alembic_version to update in case it exists.
  **/
  where: alembic_versionWhereUniqueInput
  /**
   * In case the alembic_version found by the `where` argument doesn't exist, create a new alembic_version with this data.
  **/
  create: alembic_versionCreateInput
  /**
   * In case the alembic_version was found with the provided `where` argument, update it with this data.
  **/
  update: alembic_versionUpdateInput
}


/**
 * alembic_version delete
 */
export type alembic_versionDeleteArgs = {
  /**
   * Select specific fields to fetch from the alembic_version
  **/
  select?: alembic_versionSelect | null
  /**
   * Filter which alembic_version to delete.
  **/
  where: alembic_versionWhereUniqueInput
}


/**
 * alembic_version deleteMany
 */
export type alembic_versionDeleteManyArgs = {
  where?: alembic_versionWhereInput
}


/**
 * alembic_version without action
 */
export type alembic_versionArgs = {
  /**
   * Select specific fields to fetch from the alembic_version
  **/
  select?: alembic_versionSelect | null
}



/**
 * Model document
 */

export type document = {
  id: number
  title: string | null
  docs: JsonValue | null
  doc_name: string | null
  created_at: Date | null
}


export type AggregateDocument = {
  count: number
  avg: DocumentAvgAggregateOutputType | null
  sum: DocumentSumAggregateOutputType | null
  min: DocumentMinAggregateOutputType | null
  max: DocumentMaxAggregateOutputType | null
}

export type DocumentAvgAggregateOutputType = {
  id: number
}

export type DocumentSumAggregateOutputType = {
  id: number
}

export type DocumentMinAggregateOutputType = {
  id: number
}

export type DocumentMaxAggregateOutputType = {
  id: number
}


export type DocumentAvgAggregateInputType = {
  id?: true
}

export type DocumentSumAggregateInputType = {
  id?: true
}

export type DocumentMinAggregateInputType = {
  id?: true
}

export type DocumentMaxAggregateInputType = {
  id?: true
}

export type AggregateDocumentArgs = {
  where?: documentWhereInput
  orderBy?: Enumerable<documentOrderByInput> | documentOrderByInput
  cursor?: documentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<DocumentDistinctFieldEnum>
  count?: true
  avg?: DocumentAvgAggregateInputType
  sum?: DocumentSumAggregateInputType
  min?: DocumentMinAggregateInputType
  max?: DocumentMaxAggregateInputType
}

export type GetDocumentAggregateType<T extends AggregateDocumentArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetDocumentAggregateScalarType<T[P]>
}

export type GetDocumentAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof DocumentAvgAggregateOutputType ? DocumentAvgAggregateOutputType[P] : never
}
    
    

export type documentSelect = {
  id?: boolean
  title?: boolean
  docs?: boolean
  doc_name?: boolean
  created_at?: boolean
}

export type documentGetPayload<
  S extends boolean | null | undefined | documentArgs,
  U = keyof S
> = S extends true
  ? document
  : S extends undefined
  ? never
  : S extends documentArgs | FindManydocumentArgs
  ? 'include' extends U
    ? document 
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof document ? document[P]
: 
 never
    }
  : document
: document


export interface documentDelegate {
  /**
   * Find zero or one Document that matches the filter.
   * @param {FindOnedocumentArgs} args - Arguments to find a Document
   * @example
   * // Get one Document
   * const document = await prisma.document.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOnedocumentArgs>(
    args: Subset<T, FindOnedocumentArgs>
  ): CheckSelect<T, Prisma__documentClient<document | null>, Prisma__documentClient<documentGetPayload<T> | null>>
  /**
   * Find the first Document that matches the filter.
   * @param {FindFirstdocumentArgs} args - Arguments to find a Document
   * @example
   * // Get one Document
   * const document = await prisma.document.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstdocumentArgs>(
    args?: Subset<T, FindFirstdocumentArgs>
  ): CheckSelect<T, Prisma__documentClient<document | null>, Prisma__documentClient<documentGetPayload<T> | null>>
  /**
   * Find zero or more Documents that matches the filter.
   * @param {FindManydocumentArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Documents
   * const documents = await prisma.document.findMany()
   * 
   * // Get first 10 Documents
   * const documents = await prisma.document.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManydocumentArgs>(
    args?: Subset<T, FindManydocumentArgs>
  ): CheckSelect<T, Promise<Array<document>>, Promise<Array<documentGetPayload<T>>>>
  /**
   * Create a Document.
   * @param {documentCreateArgs} args - Arguments to create a Document.
   * @example
   * // Create one Document
   * const Document = await prisma.document.create({
   *   data: {
   *     // ... data to create a Document
   *   }
   * })
   * 
  **/
  create<T extends documentCreateArgs>(
    args: Subset<T, documentCreateArgs>
  ): CheckSelect<T, Prisma__documentClient<document>, Prisma__documentClient<documentGetPayload<T>>>
  /**
   * Delete a Document.
   * @param {documentDeleteArgs} args - Arguments to delete one Document.
   * @example
   * // Delete one Document
   * const Document = await prisma.document.delete({
   *   where: {
   *     // ... filter to delete one Document
   *   }
   * })
   * 
  **/
  delete<T extends documentDeleteArgs>(
    args: Subset<T, documentDeleteArgs>
  ): CheckSelect<T, Prisma__documentClient<document>, Prisma__documentClient<documentGetPayload<T>>>
  /**
   * Update one Document.
   * @param {documentUpdateArgs} args - Arguments to update one Document.
   * @example
   * // Update one Document
   * const document = await prisma.document.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends documentUpdateArgs>(
    args: Subset<T, documentUpdateArgs>
  ): CheckSelect<T, Prisma__documentClient<document>, Prisma__documentClient<documentGetPayload<T>>>
  /**
   * Delete zero or more Documents.
   * @param {documentDeleteManyArgs} args - Arguments to filter Documents to delete.
   * @example
   * // Delete a few Documents
   * const { count } = await prisma.document.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends documentDeleteManyArgs>(
    args: Subset<T, documentDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Documents.
   * @param {documentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Documents
   * const document = await prisma.document.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends documentUpdateManyArgs>(
    args: Subset<T, documentUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Document.
   * @param {documentUpsertArgs} args - Arguments to update or create a Document.
   * @example
   * // Update or create a Document
   * const document = await prisma.document.upsert({
   *   create: {
   *     // ... data to create a Document
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Document we want to update
   *   }
   * })
  **/
  upsert<T extends documentUpsertArgs>(
    args: Subset<T, documentUpsertArgs>
  ): CheckSelect<T, Prisma__documentClient<document>, Prisma__documentClient<documentGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManydocumentArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateDocumentArgs>(args: Subset<T, AggregateDocumentArgs>): Promise<GetDocumentAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for document.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__documentClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * document findOne
 */
export type FindOnedocumentArgs = {
  /**
   * Select specific fields to fetch from the document
  **/
  select?: documentSelect | null
  /**
   * Filter, which document to fetch.
  **/
  where: documentWhereUniqueInput
}


/**
 * document findFirst
 */
export type FindFirstdocumentArgs = {
  /**
   * Select specific fields to fetch from the document
  **/
  select?: documentSelect | null
  /**
   * Filter, which document to fetch.
  **/
  where?: documentWhereInput
  orderBy?: Enumerable<documentOrderByInput> | documentOrderByInput
  cursor?: documentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<DocumentDistinctFieldEnum>
}


/**
 * document findMany
 */
export type FindManydocumentArgs = {
  /**
   * Select specific fields to fetch from the document
  **/
  select?: documentSelect | null
  /**
   * Filter, which documents to fetch.
  **/
  where?: documentWhereInput
  /**
   * Determine the order of the documents to fetch.
  **/
  orderBy?: Enumerable<documentOrderByInput> | documentOrderByInput
  /**
   * Sets the position for listing documents.
  **/
  cursor?: documentWhereUniqueInput
  /**
   * The number of documents to fetch. If negative number, it will take documents before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` documents.
  **/
  skip?: number
  distinct?: Enumerable<DocumentDistinctFieldEnum>
}


/**
 * document create
 */
export type documentCreateArgs = {
  /**
   * Select specific fields to fetch from the document
  **/
  select?: documentSelect | null
  /**
   * The data needed to create a document.
  **/
  data: documentCreateInput
}


/**
 * document update
 */
export type documentUpdateArgs = {
  /**
   * Select specific fields to fetch from the document
  **/
  select?: documentSelect | null
  /**
   * The data needed to update a document.
  **/
  data: documentUpdateInput
  /**
   * Choose, which document to update.
  **/
  where: documentWhereUniqueInput
}


/**
 * document updateMany
 */
export type documentUpdateManyArgs = {
  data: documentUpdateManyMutationInput
  where?: documentWhereInput
}


/**
 * document upsert
 */
export type documentUpsertArgs = {
  /**
   * Select specific fields to fetch from the document
  **/
  select?: documentSelect | null
  /**
   * The filter to search for the document to update in case it exists.
  **/
  where: documentWhereUniqueInput
  /**
   * In case the document found by the `where` argument doesn't exist, create a new document with this data.
  **/
  create: documentCreateInput
  /**
   * In case the document was found with the provided `where` argument, update it with this data.
  **/
  update: documentUpdateInput
}


/**
 * document delete
 */
export type documentDeleteArgs = {
  /**
   * Select specific fields to fetch from the document
  **/
  select?: documentSelect | null
  /**
   * Filter which document to delete.
  **/
  where: documentWhereUniqueInput
}


/**
 * document deleteMany
 */
export type documentDeleteManyArgs = {
  where?: documentWhereInput
}


/**
 * document without action
 */
export type documentArgs = {
  /**
   * Select specific fields to fetch from the document
  **/
  select?: documentSelect | null
}



/**
 * Deep Input Types
 */


export type alembic_versionWhereInput = {
  AND?: alembic_versionWhereInput | Enumerable<alembic_versionWhereInput>
  OR?: alembic_versionWhereInput | Enumerable<alembic_versionWhereInput>
  NOT?: alembic_versionWhereInput | Enumerable<alembic_versionWhereInput>
  version_num?: StringFilter | string
}

export type alembic_versionOrderByInput = {
  version_num?: SortOrder
}

export type alembic_versionWhereUniqueInput = {
  version_num?: string
}

export type documentWhereInput = {
  AND?: documentWhereInput | Enumerable<documentWhereInput>
  OR?: documentWhereInput | Enumerable<documentWhereInput>
  NOT?: documentWhereInput | Enumerable<documentWhereInput>
  id?: IntFilter | number
  title?: StringNullableFilter | string | null
  docs?: JsonNullableFilter
  doc_name?: StringNullableFilter | string | null
  created_at?: DateTimeNullableFilter | Date | string | null
}

export type documentOrderByInput = {
  id?: SortOrder
  title?: SortOrder
  docs?: SortOrder
  doc_name?: SortOrder
  created_at?: SortOrder
}

export type documentWhereUniqueInput = {
  id?: number
  title?: string
}

export type alembic_versionCreateInput = {
  version_num: string
}

export type alembic_versionUpdateInput = {
  version_num?: string | StringFieldUpdateOperationsInput
}

export type alembic_versionUpdateManyMutationInput = {
  version_num?: string | StringFieldUpdateOperationsInput
}

export type documentCreateInput = {
  title?: string | null
  docs?: InputJsonValue | null
  doc_name?: string | null
  created_at?: Date | string | null
}

export type documentUpdateInput = {
  title?: string | NullableStringFieldUpdateOperationsInput | null
  docs?: InputJsonValue | null
  doc_name?: string | NullableStringFieldUpdateOperationsInput | null
  created_at?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
}

export type documentUpdateManyMutationInput = {
  title?: string | NullableStringFieldUpdateOperationsInput | null
  docs?: InputJsonValue | null
  doc_name?: string | NullableStringFieldUpdateOperationsInput | null
  created_at?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
}

export type StringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  mode?: QueryMode
  not?: string | NestedStringFilter
}

export type IntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type StringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  mode?: QueryMode
  not?: string | NestedStringNullableFilter | null
}

export type JsonNullableFilter = {
  equals?: InputJsonValue | null
  not?: InputJsonValue | null
}

export type DateTimeNullableFilter = {
  equals?: Date | string | null
  in?: Enumerable<Date> | Enumerable<string> | null
  notIn?: Enumerable<Date> | Enumerable<string> | null
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeNullableFilter | null
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type NestedStringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringFilter
}

export type NestedIntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type NestedStringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringNullableFilter | null
}

export type NestedDateTimeNullableFilter = {
  equals?: Date | string | null
  in?: Enumerable<Date> | Enumerable<string> | null
  notIn?: Enumerable<Date> | Enumerable<string> | null
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeNullableFilter | null
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
